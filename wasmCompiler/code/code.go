package code

var MagicModuleHeader []byte = []byte{0x00, 0x61, 0x73, 0x6d}
var ModuleVersion []byte = []byte{0x01, 0x00, 0x00, 0x00}

const (
	I32                 uint8 = 127
	I64                 uint8 = 126
	F32                 uint8 = 125
	F64                 uint8 = 124
	ANYFUNC             uint8 = 112
	FUNC                uint8 = 96
	EMPTY               uint8 = 64
	SECTION_CUSTOM      uint8 = 0
	SECTION_TYPE        uint8 = 1
	SECTION_IMPORT      uint8 = 2
	SECTION_FUNCTION    uint8 = 3
	SECTION_TABLE       uint8 = 4
	SECTION_MEMORY      uint8 = 5
	SECTION_GLOBAL      uint8 = 6
	SECTION_EXPORT      uint8 = 7
	SECTION_START       uint8 = 8
	SECTION_ELEMENT     uint8 = 9
	SECTION_CODE        uint8 = 10
	SECTION_DATA        uint8 = 11
	UNREACHABLE         uint8 = 0
	NOP                 uint8 = 1
	BLOCK               uint8 = 2
	LOOP                uint8 = 3
	IF                  uint8 = 4
	ELSE                uint8 = 5
	END                 uint8 = 11
	BR                  uint8 = 12
	BR_IF               uint8 = 13
	BR_TABLE            uint8 = 14
	RETURN              uint8 = 15
	CALL                uint8 = 16
	CALL_INDIRECT       uint8 = 17
	DROP                uint8 = 26
	SELECT              uint8 = 27
	LOCAL_GET           uint8 = 32
	LOCAL_SET           uint8 = 33
	LOCAL_TEE           uint8 = 34
	GLOBAL_GET          uint8 = 35
	GLOBAL_SET          uint8 = 36
	I32_LOAD            uint8 = 40
	I64_LOAD            uint8 = 41
	F32_LOAD            uint8 = 42
	F64_LOAD            uint8 = 43
	I32_LOAD8_S         uint8 = 44
	I32_LOAD8_U         uint8 = 45
	I32_LOAD16_S        uint8 = 46
	I32_LOAD16_U        uint8 = 47
	I64_LOAD8_S         uint8 = 48
	I64_LOAD8_U         uint8 = 49
	I64_LOAD16_S        uint8 = 50
	I64_LOAD16_U        uint8 = 51
	I64_LOAD32_S        uint8 = 52
	I64_LOAD32_U        uint8 = 53
	I32_STORE           uint8 = 54
	I64_STORE           uint8 = 55
	F32_STORE           uint8 = 56
	F64_STORE           uint8 = 57
	I32_STORE8          uint8 = 58
	I32_STORE16         uint8 = 59
	I64_STORE8          uint8 = 60
	I64_STORE16         uint8 = 61
	I64_STORE32         uint8 = 62
	MEMORY_SIZE         uint8 = 63
	MEMORY_GROW         uint8 = 64
	I32_CONST           uint8 = 65
	I64_CONST           uint8 = 66
	F32_CONST           uint8 = 67
	F64_CONST           uint8 = 68
	I32_EQZ             uint8 = 69
	I32_EQ              uint8 = 70
	I32_NE              uint8 = 71
	I32_LT_S            uint8 = 72
	I32_LT_U            uint8 = 73
	I32_GT_S            uint8 = 74
	I32_GT_U            uint8 = 75
	I32_LE_S            uint8 = 76
	I32_LE_U            uint8 = 77
	I32_GE_S            uint8 = 78
	I32_GE_U            uint8 = 79
	I64_EQZ             uint8 = 80
	I64_EQ              uint8 = 81
	I64_NE              uint8 = 82
	I64_LT_S            uint8 = 83
	I64_LT_U            uint8 = 84
	I64_GT_S            uint8 = 85
	I64_GT_U            uint8 = 86
	I64_LE_S            uint8 = 87
	I64_LE_U            uint8 = 88
	I64_GE_S            uint8 = 89
	I64_GE_U            uint8 = 90
	F32_EQ              uint8 = 91
	F32_NE              uint8 = 92
	F32_LT              uint8 = 93
	F32_GT              uint8 = 94
	F32_LE              uint8 = 95
	F32_GE              uint8 = 96
	F64_EQ              uint8 = 97
	F64_NE              uint8 = 98
	F64_LT              uint8 = 99
	F64_GT              uint8 = 100
	F64_LE              uint8 = 101
	F64_GE              uint8 = 102
	I32_CLZ             uint8 = 103
	I32_CTZ             uint8 = 104
	I32_POPCNT          uint8 = 105
	I32_ADD             uint8 = 106
	I32_SUB             uint8 = 107
	I32_MUL             uint8 = 108
	I32_DIV_S           uint8 = 109
	I32_DIV_U           uint8 = 110
	I32_REM_S           uint8 = 111
	I32_REM_U           uint8 = 112
	I32_AND             uint8 = 113
	I32_OR              uint8 = 114
	I32_XOR             uint8 = 115
	I32_SHL             uint8 = 116
	I32_SHR_S           uint8 = 117
	I32_SHR_U           uint8 = 118
	I32_ROTL            uint8 = 119
	I32_ROTR            uint8 = 120
	I64_CLZ             uint8 = 121
	I64_CTZ             uint8 = 122
	I64_POPCNT          uint8 = 123
	I64_ADD             uint8 = 124
	I64_SUB             uint8 = 125
	I64_MUL             uint8 = 126
	I64_DIV_S           uint8 = 127
	I64_DIV_U           uint8 = 128
	I64_REM_S           uint8 = 129
	I64_REM_U           uint8 = 130
	I64_AND             uint8 = 131
	I64_OR              uint8 = 132
	I64_XOR             uint8 = 133
	I64_SHL             uint8 = 134
	I64_SHR_S           uint8 = 135
	I64_SHR_U           uint8 = 136
	I64_ROTL            uint8 = 137
	I64_ROTR            uint8 = 138
	F32_ABS             uint8 = 139
	F32_NEG             uint8 = 140
	F32_CEIL            uint8 = 141
	F32_FLOOR           uint8 = 142
	F32_TRUNC           uint8 = 143
	F32_NEAREST         uint8 = 144
	F32_SQRT            uint8 = 145
	F32_ADD             uint8 = 146
	F32_SUB             uint8 = 147
	F32_MUL             uint8 = 148
	F32_DIV             uint8 = 149
	F32_MIN             uint8 = 150
	F32_MAX             uint8 = 151
	F32_COPYSIGN        uint8 = 152
	F64_ABS             uint8 = 153
	F64_NEG             uint8 = 154
	F64_CEIL            uint8 = 155
	F64_FLOOR           uint8 = 156
	F64_TRUNC           uint8 = 157
	F64_NEAREST         uint8 = 158
	F64_SQRT            uint8 = 159
	F64_ADD             uint8 = 160
	F64_SUB             uint8 = 161
	F64_MUL             uint8 = 162
	F64_DIV             uint8 = 163
	F64_MIN             uint8 = 164
	F64_MAX             uint8 = 165
	F64_COPYSIGN        uint8 = 166
	I32_WRAP_F64        uint8 = 167
	I32_TRUNC_S_F32     uint8 = 168
	I32_TRUNC_U_F32     uint8 = 169
	I32_TRUNC_S_F64     uint8 = 170
	I32_TRUNC_U_F64     uint8 = 171
	I64_EXTEND_S_I32    uint8 = 172
	I64_EXTEND_U_I32    uint8 = 173
	I64_TRUNC_S_F32     uint8 = 174
	I64_TRUNC_U_F32     uint8 = 175
	I64_TRUNC_S_F64     uint8 = 176
	I64_TRUNC_U_F64     uint8 = 177
	F32_CONVERT_S_I32   uint8 = 178
	F32_CONVERT_U_I32   uint8 = 179
	F32_CONVERT_S_I64   uint8 = 180
	F32_CONVERT_U_I64   uint8 = 181
	F32_DEMOTE_F64      uint8 = 182
	F64_CONVERT_S_I32   uint8 = 183
	F64_CONVERT_U_I32   uint8 = 184
	F64_CONVERT_S_I64   uint8 = 185
	F64_CONVERT_U_I64   uint8 = 186
	F64_PROMOTE_F32     uint8 = 187
	I32_REINTERPRET_F32 uint8 = 188
	I64_REINTERPRET_F64 uint8 = 189
	F32_REINTERPRET_I32 uint8 = 190
	F64_REINTERPRET_I64 uint8 = 191
	DESC_FUNCTION       uint8 = 0
	DESC_TABLE          uint8 = 1
	DESC_MEMORY         uint8 = 2
	DESC_GLOBAL         uint8 = 3
	LIMIT_MIN           uint8 = 0
	LIMIT_MIN_MAX       uint8 = 1
	IMMUTABLE           uint8 = 0
	MUTABLE             uint8 = 1
)
